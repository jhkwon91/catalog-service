plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.jetbrains.kotlin.jvm'
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'

java {
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.0")
//	set('testcontainersVersion', "1.17.3")
	set('testKeycloakVersion', "3.2.0")
	set('otelVersion', "1.32.0")
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

bootBuildImage {
	imageName = "${project.name}"
	environment = ["BP_JVM_VERSION":"17.*"]
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
//	implementation 'org.flywaydb:flyway-core'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly "io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation "com.github.dasniko:testcontainers-keycloak:${testKeycloakVersion}"
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"


}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

bootRun {
	systemProperty 'spring.profiles.active', 'testdata'
}

springBoot {
	buildInfo()
}

tasks.named('test') {
	useJUnitPlatform()
}
kotlin {
	jvmToolchain(17)
}


